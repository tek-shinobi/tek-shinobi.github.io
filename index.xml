<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tek Shinobi Blog</title>
    <link>https://tek-shinobi.github.io/</link>
    <description>Recent content on Tek Shinobi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 25 Jul 2023 10:41:57 +0300</lastBuildDate><atom:link href="https://tek-shinobi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang:Distributed Rate Limiting Using Fixed Window</title>
      <link>https://tek-shinobi.github.io/posts/golangdistributed-rate-limiting-using-fixed-window/</link>
      <pubDate>Tue, 25 Jul 2023 10:41:57 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golangdistributed-rate-limiting-using-fixed-window/</guid>
      <description>Fixed Window rate limiter is the simplest form of rate limiting. It means that once the expiration has been set, a client that reaches the limit will be blocked from making further requests until the expiration time arrives. If a client has a limit of 50 requests every minute and makes all 50 requests in the first 5 seconds of the minute, it will have to wait 55 seconds to make another request.</description>
    </item>
    
    <item>
      <title>Rate Limiting in a Distributed System</title>
      <link>https://tek-shinobi.github.io/posts/rate-limiting-in-distributed-system/</link>
      <pubDate>Sat, 15 Jul 2023 13:19:42 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/rate-limiting-in-distributed-system/</guid>
      <description>Assume that we own a suite of API based microservices that implement a discount coupon service. Rate-limiting is needed to ensure that all clients have equal access to our resources and protect our APIs from (malicious or erroneous) intensive usage.
Rate-limiting seems straightforward: we only allow a given client to perform X calls every minute. It’s quite easy to implement on a single server instance, and we can easily find libraries to do that for us.</description>
    </item>
    
    <item>
      <title>Golang Testing: Creating Large Files</title>
      <link>https://tek-shinobi.github.io/posts/golang-testing-creating-large-files/</link>
      <pubDate>Tue, 11 Jul 2023 15:17:34 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-testing-creating-large-files/</guid>
      <description>Needed a quick hack to generate a known file size, to test that file upload limit logic works in an endpoint
Another option is to just generate a temporary file, using nearly the same process. This approach is fine but can slow down the test since file needs to be generated each time the test is run and beyond a certain size, this file generation time can become non-trivial.
package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) type LargeData struct { Data []byte } const desiredSize = 12 * 1024 * 1024 // 12MB  func main() { rand.</description>
    </item>
    
    <item>
      <title>Add Gpg Keys to Repo</title>
      <link>https://tek-shinobi.github.io/posts/add-gpg-keys-to-repo/</link>
      <pubDate>Sat, 07 Jan 2023 22:53:11 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/add-gpg-keys-to-repo/</guid>
      <description>Add GPG keys to github repo and local The process involves a set of simple steps:
 Create GPG keys from commandline terminal Export the created keys using armor into a text blob. Take the blob and head over to github account -&amp;gt; Settings -&amp;gt; SSH and GPG keys and add it as GPG key The most important point: cd to you local repo directory and configure the key there. This step will need to be done for every local repo.</description>
    </item>
    
    <item>
      <title>Golang: Handling Null in Database Tables</title>
      <link>https://tek-shinobi.github.io/posts/golang-handling-null-in-database-tables/</link>
      <pubDate>Wed, 11 May 2022 01:52:51 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-handling-null-in-database-tables/</guid>
      <description>Consider this table schema (Postgres):
CREATE TABLE IF NOT EXISTS mytable ( id BIGSERIAL PRIMARY KEY, title TEXT NULL, version INTEGER NULL ); if we write its Go model, title is string and version is int. But here we have a problem. Zero value of string in Go is &amp;quot;&amp;quot; not nil. Same for int whose zero value is 0 and not nil.
If we tried to write the above model in Go like this:</description>
    </item>
    
    <item>
      <title>Golang: Using Postgres Inside Docker Container</title>
      <link>https://tek-shinobi.github.io/posts/using-postgres-inside-docker-container/</link>
      <pubDate>Thu, 05 May 2022 10:38:56 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/using-postgres-inside-docker-container/</guid>
      <description>Cleanup if default postgres port not free If port 5432 is already in use, run this to see what process is using it:
sudo ss -lptn &#39;sport = :5432&#39; the above command will also display the pid using which you can kill the process. For example, if the pid is 1667, kill it by sudo kill 1667
 To connect to an existing running docker container via its container id, scroll to end To see how to connect to it using only golang standard library (database/sql) + a database driver (lib/pq in this case for postgres), without helper methods from 3rd party libraries like sqlx, scroll to end  Connecting to postgres from scratch First launch the postgres container in interactive mode:</description>
    </item>
    
    <item>
      <title>Golang: Common Concurrency Patterns</title>
      <link>https://tek-shinobi.github.io/posts/golang-common-concurrency-patterns/</link>
      <pubDate>Fri, 15 Oct 2021 15:41:34 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-common-concurrency-patterns/</guid>
      <description>Some simple concurrency patterns which are often used in Golang
1. for-select pattern This is a fundamental pattern. It is typically used to read data from multiple channels.
var c1, c2 &amp;lt;-chan int for { // Either loop infinitely or range over something  select { case &amp;lt;-c1: // Do some work with channels  case &amp;lt;-c2: default: // auto run if other cases are not ready  } // do some work } The select statement looks like switch one, but its behavior is different.</description>
    </item>
    
    <item>
      <title>Golang Channels</title>
      <link>https://tek-shinobi.github.io/posts/golang-channels/</link>
      <pubDate>Mon, 11 Oct 2021 16:24:24 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-channels/</guid>
      <description>When dealing with conccurency problems, it is harder to reason about when moving down the stack of abstraction (machine, process, thread, hardware components, etc). Most programming languages use thread as its highest level of abstraction. Fortunately, Go builds on top of that &amp;amp; introduced Goroutine.
 “Share memory by communicating, don’t communicate by sharing memory.”
 One of Go’s mottos   Although Golang provides traditional locking mechanism in sync package, its philosophy prefers “share memory by communicating”.</description>
    </item>
    
    <item>
      <title>Golang: Unmarshal Json Blob With Unknown Schema</title>
      <link>https://tek-shinobi.github.io/posts/golang-unmarshal-json-blob-with-unknown-schema/</link>
      <pubDate>Fri, 11 Jun 2021 22:07:45 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-unmarshal-json-blob-with-unknown-schema/</guid>
      <description>There are two ways to handle this:
Approach 1: Using json.RawMessage json.RawMessage: represents a raw JSON value
It and can be used to delay parsing until the schema is known.
Here&amp;rsquo;s an example of how to use json.RawMessage:
type UnknownSchema struct { Data json.RawMessage `json:&amp;#34;data&amp;#34;` } func main() { jsonStr := `{&amp;#34;data&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;John&amp;#34;,&amp;#34;age&amp;#34;:30}}` var obj UnknownSchema err := json.Unmarshal([]byte(jsonStr), &amp;amp;obj) if err != nil { panic(err) } // The schema of the data field is still unknown at this point  fmt.</description>
    </item>
    
    <item>
      <title>Rust Gotchas Copy and Clone</title>
      <link>https://tek-shinobi.github.io/posts/rust-gotchas-copy-and-clone/</link>
      <pubDate>Sat, 29 May 2021 22:21:11 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/rust-gotchas-copy-and-clone/</guid>
      <description>Rust has two central concepts: Borrowing and ownership.
In very simple terms, Borrowing conceptually means access to the data through reference, be it mutable or immutable. This is implemented via &amp;amp; and &amp;amp;mut. For a more exhastive treatment, please refer the docs.
Again, in very simple terms, Ownership conceptually means accessing without &amp;amp; (i.e. without using a reference). Of course, Ownership is a science in Rust and please refer to docs for in-depth treatment.</description>
    </item>
    
    <item>
      <title>Docker Notes</title>
      <link>https://tek-shinobi.github.io/posts/docker-notes/</link>
      <pubDate>Mon, 10 May 2021 08:15:54 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/docker-notes/</guid>
      <description>To cleanup unused/dnagling docker images: sudo docker image prune
To cleanup ununsed volumes: sudo docker volume prune
To list current docker images: sudo docker images
To remove docker image by image_id: sudo docker rmi &amp;lt;your_image_id1&amp;gt; &amp;lt;your_image_id2&amp;gt;
(sometimes, docker rmi command will throw up errors like:
 Error response from daemon: conflict: unable to delete 78f7412b7923 (must be forced) - image is being used by stopped container ebfe07787e7c
 This means there are some stopped docker containers using those images.</description>
    </item>
    
    <item>
      <title>Temporary Files and Temporary Directory in Rust</title>
      <link>https://tek-shinobi.github.io/posts/temporary-files-and-temporary-directory-in-rust/</link>
      <pubDate>Sat, 20 Mar 2021 11:36:47 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/temporary-files-and-temporary-directory-in-rust/</guid>
      <description>I was looking for Python style temporary files and temporary directories in Rust. Very handy when writing tests for simulating actual files, or when we need to use files once or cache large amount of data for short time. We then let the operating system delete the files at a later time automatically or by its clean-up feature manually.
Doing ourselves using Operating System Temporary Directory Let&amp;rsquo;s first implement this by ourselves to understand what is going on.</description>
    </item>
    
    <item>
      <title>Rust File Builder Pattern for File Read Writes</title>
      <link>https://tek-shinobi.github.io/posts/rust-file-builder-pattern-for-file-read-writes/</link>
      <pubDate>Sat, 20 Mar 2021 11:14:09 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/rust-file-builder-pattern-for-file-read-writes/</guid>
      <description>Consider the following test code that creates a file, writes to it and then reads back to confirm what it wrote.
#[cfg(test)] mod tests { #[allow(unused_imports)] use super::*; use std::fs::{self, File, OpenOptions}; use std::io::{Read, Seek, SeekFrom, Write}; use tempfile::{tempdir, tempfile, NamedTempFile}; #[test] fn test_file() { let dir = tempdir().unwrap(); let file_path = dir.path().join(&amp;#34;foo.txt&amp;#34;); let mut file = File::create(file_path.to_owned()).unwrap(); file.write_all(&amp;#34;Bar Baz&amp;#34;.as_bytes()) .unwrap(); file.seek(SeekFrom::Start(0)).unwrap(); let mut contents = String::new(); file.read_to_string(&amp;amp;mut contents).unwrap(); assert_eq!(contents, &amp;#34;Bar Baz&amp;#34;); drop(file); dir.</description>
    </item>
    
    <item>
      <title>Turbofish in Rust</title>
      <link>https://tek-shinobi.github.io/posts/turbofish-in-rust/</link>
      <pubDate>Wed, 10 Mar 2021 10:50:37 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/turbofish-in-rust/</guid>
      <description>Consider the following code (or run it in rust playground here):
fn main() { let a:Vec = vec![1, 2, 3]; let doubled = a.iter().map(|&amp;amp;x| x * 2).collect(); assert_eq!(vec![2, 4, 6], doubled); } If you ran it in the playground linked above, you will see the following compiler error.
error[E0282]: type annotations needed --&amp;gt; src/main.rs:4:9 | 4 | let doubled = a.iter().map(|&amp;amp;x| x * 2).collect(); | ^^^^^^^ consider giving `doubled` a type error: aborting due to previous error For more information about this error, try `rustc --explain E0282`.</description>
    </item>
    
    <item>
      <title>Self in Use Statement in Rust</title>
      <link>https://tek-shinobi.github.io/posts/self-in-use-statement-in-rust/</link>
      <pubDate>Tue, 09 Mar 2021 11:51:54 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/self-in-use-statement-in-rust/</guid>
      <description>I was going through some library code in a rust crate and this pattern had my head scratching:
std::io::{self,Cursor}; What this is equivalent to is:
use std::io; use std::io::Cursor; which means explicitly use std::io::Cursor and also use std::io itself. Thus, Cursor need not be prefixed but you’d still need to do io::BufReader and so on.</description>
    </item>
    
    <item>
      <title>Rust Tips: Box Rc Arc Cell Refcell Mutex</title>
      <link>https://tek-shinobi.github.io/posts/rust-tips-box-rc-arc-cell-refcell-mutex/</link>
      <pubDate>Mon, 08 Mar 2021 11:58:32 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/rust-tips-box-rc-arc-cell-refcell-mutex/</guid>
      <description>Difference Between Box, Rc, Arc, Cell (and its various variants.. RefCell, Mutex, RwLock) in Rust:
 Box is for single ownership. A great use case is to use this when we want to store primitive types (stored on stack) on heap. Rc is for multiple ownership. Arc is for multiple ownership, but threadsafe. RefCell is for “interior mutability”; that is, when you need to mutate something behind a &amp;amp;T. Cell is for “interior mutability” for Copy types; that is, when you need to mutate something behind a &amp;amp;T.</description>
    </item>
    
    <item>
      <title>What Is a Tcp Stream</title>
      <link>https://tek-shinobi.github.io/posts/what-is-a-tcp-stream/</link>
      <pubDate>Sat, 08 Feb 2020 18:34:10 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/what-is-a-tcp-stream/</guid>
      <description>The TCP protocol is modeled on the concept of a single continuous stream of unlimited length. This is a very important concept to understand, and is the number one cause of confusion that we see.
What exactly does this mean, and how does it affect developers?
Imagine that you&amp;rsquo;re trying to send a few messages over the socket. So you do something like this (in pseudocode):
socket.write(&amp;quot;Hi Sandy.&amp;quot;); socket.write(&amp;quot;Are you busy tonight?</description>
    </item>
    
  </channel>
</rss>
