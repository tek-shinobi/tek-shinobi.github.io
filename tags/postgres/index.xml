<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgres on Tek Shinobi Blog</title>
    <link>https://tek-shinobi.github.io/tags/postgres/</link>
    <description>Recent content in postgres on Tek Shinobi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 05 May 2022 10:38:56 +0300</lastBuildDate>
    <atom:link href="https://tek-shinobi.github.io/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang: Using Postgres Inside Docker Container</title>
      <link>https://tek-shinobi.github.io/posts/using-postgres-inside-docker-container/</link>
      <pubDate>Thu, 05 May 2022 10:38:56 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/using-postgres-inside-docker-container/</guid>
      <description>Cleanup if default postgres port not free If port 5432 is already in use, run this to see what process is using it:&#xA;sudo ss -lptn &amp;#39;sport = :5432&amp;#39; the above command will also display the pid using which you can kill the process. For example, if the pid is 1667, kill it by sudo kill 1667&#xA;To connect to an existing running docker container via its container id, scroll to end To see how to connect to it using only golang standard library (database/sql) + a database driver (lib/pq in this case for postgres), without helper methods from 3rd party libraries like sqlx, scroll to end Connecting to postgres from scratch First launch the postgres container in interactive mode:</description>
    </item>
  </channel>
</rss>
