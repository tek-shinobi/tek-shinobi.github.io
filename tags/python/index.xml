<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Tek Shinobi Blog</title>
    <link>https://tek-shinobi.github.io/tags/python/</link>
    <description>Recent content in python on Tek Shinobi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 05 Sep 2019 11:01:54 +0300</lastBuildDate>
    <atom:link href="https://tek-shinobi.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Backend Python:Temporary Files in Python</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_temporary-files-in-python/</link>
      <pubDate>Thu, 05 Sep 2019 11:01:54 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_temporary-files-in-python/</guid>
      <description>Let me start with an actual use case scenario. As a backend developer, I need to process the user uploaded file data all the time. Here temporary files shine. The best part about these is that they make cleanup easier. If you make a real file, you need to use some OS level utility to manually delete the file after you are done with it. If you are using temporary files â€“ option-1, then just by closing the file, you are guaranteed that OS will later clear it up.</description>
    </item>
    <item>
      <title>Backend Python:Working With Python Lxml Parser for Creating XML Elements</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_working-with-python-lxml-parser-for-creating-xml-elements/</link>
      <pubDate>Fri, 07 Sep 2018 21:44:59 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_working-with-python-lxml-parser-for-creating-xml-elements/</guid>
      <description>lxml parser can be a bit confusing because of the sheer range of options it offers. Here are a few cookbook style examples.&#xA;XML Generation Target code:&#xA;&amp;lt;root_element xmlns=&amp;#34;http://www.w3.org/TR/html4/&amp;#34; some_more_params=&amp;#34;12345-678-ABC&amp;#34; yet_more_params=&amp;#34;POKEMON-SUCKS&amp;#34;&amp;gt; &amp;lt;element&amp;gt; &amp;lt;element_data1 type=&amp;#34;sometype&amp;#34;&amp;gt;&amp;lt;![CDATA[SomeVal123]]&amp;gt;&amp;lt;/element_data1&amp;gt; &amp;lt;element_data2&amp;gt;12345&amp;lt;/element_data2&amp;gt; &amp;lt;element_data3 some_attr=&amp;#34;some_attr&amp;#34;&amp;gt;More random data&amp;lt;/element_data3&amp;gt; &amp;lt;/element&amp;gt; &amp;lt;another_element&amp;gt; &amp;lt;element_data1 type=&amp;#34;sometype&amp;#34;&amp;gt;&amp;lt;![CDATA[SomeVal1234]]&amp;gt;&amp;lt;/element_data1&amp;gt; &amp;lt;element_data2&amp;gt;12345&amp;lt;/element_data2&amp;gt; &amp;lt;element_data3 some_attr=&amp;#34;some_attr&amp;#34;&amp;gt;More random data&amp;lt;/element_data3&amp;gt; &amp;lt;/another_element&amp;gt; &amp;lt;/root_element&amp;gt; Ok, Here is the code to generate it:&#xA;from lxml import etree def create_xml(): XML_OPTIONS = {&amp;#39;pretty_print&amp;#39;: True, &amp;#39;xml_declaration&amp;#39;: True, &amp;#39;encoding&amp;#39;: &amp;#39;utf-8&amp;#39;} def create_root_element(): XHTML_NAMESPACE = &amp;#34;http://www.</description>
    </item>
    <item>
      <title>Backend Python:Using Pytest With Django and Django Rest Framework</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_using-pytest-with-django-and-django-rest-framework/</link>
      <pubDate>Fri, 07 Sep 2018 19:23:46 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_using-pytest-with-django-and-django-rest-framework/</guid>
      <description>What is Pytest Pytest is testing framework for Python. Very popular with Django.&#xA;Killer feature : Fixtures Fixtures are the killer feature of Pytest. Fixtures are functions that run before and after each test, like setUp and tearDown in unitest and labelled pytest killer feature. Fixtures are used for data configuration, connection/disconnection of databases, calling extra actions, and so on.&#xA;All fixtures have scope argument with available values:&#xA;function run once per test class run once per class of tests module run once per module session run once per session Note: Default value of scope is function</description>
    </item>
    <item>
      <title>Backend Python:SqlAlchemy Tutorial</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_sqlalchemy-tutorial/</link>
      <pubDate>Fri, 07 Sep 2018 17:21:17 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_sqlalchemy-tutorial/</guid>
      <description>SQLAlchemy Overview&#xA;This describes the basic overview of SQL Alchemy. Notice the color theme. It will be related to the next onion-ring overview of SQL Alchemy.&#xA;SQLAlchemy Onion Diagram&#xA;SQL Alchemy is divided into Core and ORM. You can use Core and not use ORM. ORM is more geared towards mapping model objects to Python data types. Core on the other hand focuses on transacting with the database.&#xA;Level 1: Engine, Connections, Transactions This is the level that talks directly to Python DBAPI.</description>
    </item>
    <item>
      <title>Backend Python:Django Rest Framework Project Setup Template</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_django-rest-framework-project-setup-template/</link>
      <pubDate>Fri, 07 Sep 2018 16:18:09 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_django-rest-framework-project-setup-template/</guid>
      <description>I am assuming that pipenv is already installed. Also, assuming that Python 3.5+ already installed in the base environment.&#xA;create new environment: pipenv shell pipenv install django djangorestframework markdown django-filter pygments flake8 httpie pytest pytest-django pytest-factoryboy pytest-cov django-extensions djangorestframework-simplejwt django-cors-headers mypy djangorestframework-stubs pipenv install --dev --pre black create django project:django-admin.py startproject my_proj cd my_proj python manage.py startapp my_app The above is a basic boiler plate.&#xA;Some explanation of what got installed:</description>
    </item>
    <item>
      <title>Backend Python:Logging in Django and Django Rest Framework Projects</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_logging-in-django-and-django-rest-framework-projects/</link>
      <pubDate>Fri, 07 Sep 2018 16:02:36 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_logging-in-django-and-django-rest-framework-projects/</guid>
      <description>Logging is extremely necessary, during development and production. There are two ways to implement logging.&#xA;In apps with high scale, we log to console and then have some in-the-cloud solution like Sentry to log the messages from the console. This is great because large scale apps often run on multiple servers and we can converge all the logs to one place. Alternately, we can log the messages to file on the server itself.</description>
    </item>
    <item>
      <title>Backend Python:Writing Custom Django Management Commands</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_writing-custom-django-management-commands/</link>
      <pubDate>Fri, 07 Sep 2018 14:02:37 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_writing-custom-django-management-commands/</guid>
      <description>Any command given with manage.py is called management command. Django comes with many built-in management commands like runserver, startapp etc. To see a full list of built-in management commands, type: python manage.py help&#xA;The benefit of management command script is that this script executes within Django environment. You can run all of Django ORM queries within this script. You can import models. You have access to project resources.&#xA;In this tutorial we will see how to populate a table with some contents of a csv file.</description>
    </item>
    <item>
      <title>Backend Python:Adding AJAX to Python Django Projects</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_adding-ajax-to-python-django-projects/</link>
      <pubDate>Fri, 07 Sep 2018 13:55:19 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_adding-ajax-to-python-django-projects/</guid>
      <description>A very nice explanation on SO regarding what and why about AJAX from Django perspective: https://stackoverflow.com/questions/20306981/how-do-i-integrate-ajax-with-django-applications&#xA;So, specifically in Django, when we use AJAX to do a form POST request, we need a CSRF token. This is a security feature. If we are using Django templates, the templates do the job of generating a csrf token and tacking it along with the POST request data sent to the server. But when we are doing form POST via AJAX call, there are no Django templates involved.</description>
    </item>
    <item>
      <title>Backend Python:Adding Login and Registration in Django</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_adding-login-and-registration-in-django/</link>
      <pubDate>Fri, 07 Sep 2018 13:47:36 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_adding-login-and-registration-in-django/</guid>
      <description>Adding login and registration is very straight forward in Django. Note that Django provides a built in User model.&#xA;User model exists ONLY for authentication. Use the User model to only store absolutely necessary info for authentication. Like Username and password (or if using custom user model, email and password.. I usually make the email as the unique field). Nothing else. Anything else, like gender, blah blah blah goes in other models like profile etc.</description>
    </item>
    <item>
      <title>Backend Python:Adding Reverse Url Lookup in Django</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_adding-reverse-url-lookup-in-django/</link>
      <pubDate>Fri, 07 Sep 2018 13:39:51 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_adding-reverse-url-lookup-in-django/</guid>
      <description>Reverse url lookup is very cool feature in Django that allows us to not hard-code urls in templates or controller logic. This helps us change the URLs later in urls.py and not have to make the same changes everywhere in templates and logic. Keep it DRY.&#xA;To implement reverse url lookup, you need to do these:&#xA;Make a namespace (if your urls are inside an appâ€¦ otherwise omit this step). Making a namespace makes it possible to have multiple apps use the same name for named urls.</description>
    </item>
    <item>
      <title>Backend Python:Django Custom Queryset vs Custom Manager for Database Queries</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_django-custom-queryset-vs-custom-manager-for-database-queries/</link>
      <pubDate>Fri, 07 Sep 2018 13:30:55 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_django-custom-queryset-vs-custom-manager-for-database-queries/</guid>
      <description>Note: this applies to Django &amp;gt;= 1.7&#xA;From the docs:&#xA;A Manager is the interface through which database query operations are provided to Django models. At least one Manager exists for every model in a Django application.&#xA;There are two reasons you might want to customize a Manager: to add extra Manager methods, and/or to modify the initial QuerySet the Manager returns.&#xA;Since Django 1.7 and onwards, we no longer need to create custom manager and custom queryset separately.</description>
    </item>
    <item>
      <title>Backend Python:Adding Custom User Model in Django</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_adding-custom-user-model-in-django/</link>
      <pubDate>Fri, 07 Sep 2018 12:04:04 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_adding-custom-user-model-in-django/</guid>
      <description>Part 1 One of the first things I do after creating a new Django or Django Rest Framework project is to create a custom User model. Part 1 deals with case when you add custom User model right at the start of a project. In part 2 , we deal with scenario when custom User model is added later in the project.&#xA;What exactly is a User model for? Django uses a User model for only one purpose, user authentication.</description>
    </item>
    <item>
      <title>Backend Python:Setting Active Navbar Link in Django Template</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_setting-active-navbar-link-in-django-template/</link>
      <pubDate>Fri, 07 Sep 2018 11:47:47 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_setting-active-navbar-link-in-django-template/</guid>
      <description>Here is probably the best way to set the active navbar link in Django template. Note, this needs no jQuery/javascript.&#xA;Step 1 Create named urls:&#xA;from django.conf.urls import url, include from django.contrib import admin from django.conf import settings from django.conf.urls.static import static from .views import ( HomeView, AboutView, ContactView, LoginView, RegistrationView ) urlpatterns = [ #url(r&amp;#39;^products/(?P&amp;lt;slug&amp;gt;[\w-]+)/$&amp;#39;, EcomProductDetailSlugView.as_view()), url(r&amp;#39;^$&amp;#39;, HomeView.as_view(), name=&amp;#39;home&amp;#39;), url(r&amp;#39;^about/$&amp;#39;, AboutView.as_view(), name=&amp;#39;about&amp;#39;), url(r&amp;#39;^contact/$&amp;#39;, ContactView.as_view(), name=&amp;#39;contact&amp;#39;), url(r&amp;#39;^login/$&amp;#39;, LoginView.as_view(), name=&amp;#39;login&amp;#39;), url(r&amp;#39;^register/$&amp;#39;, RegistrationView.</description>
    </item>
    <item>
      <title>Backend Python:Django Sessions for Anonymous Users</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_django-sessions-for-anonymous-users/</link>
      <pubDate>Fri, 07 Sep 2018 11:39:04 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_django-sessions-for-anonymous-users/</guid>
      <description>We know that all logged in users are connected to a session. This is something done for you by Django middlewares.&#xA;Similarly, for anonymous users (not logged in), every time the server receives a request, django creates a session object (meaning, an object with session_key, session_data and expire_data values). But the catch here is that you wonâ€™t see this session object in the django_session table because django sessions are saved only when modified .</description>
    </item>
    <item>
      <title>Backend Python:Django ORM Tips: _set meaning in Django ORM relationship</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_django-orm-tips-set/</link>
      <pubDate>Fri, 07 Sep 2018 11:18:20 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_django-orm-tips-set/</guid>
      <description>_set is associated with reverse relation on a model.&#xA;Django allows you to access reverse relations on a model. By default, Django creates a manager (RelatedManager) on your model to handle this, named &amp;lt;model&amp;gt;_set, where &amp;lt;model&amp;gt; is your model name in lowercase.&#xA;Excellent link on StackOverflow here: https://stackoverflow.com/questions/25386119/whats-the-difference-between-a-onetoone-manytomany-and-a-foreignkey-field-in-d&#xA;If we have these models:&#xA;class User(models.Model): username = models.CharField(max_length=100, unique=True) companies = models.ManyToManyField(&amp;#39;Company&amp;#39;, blank=True) class Company(models.Model): name = models.CharField(max_length=255) In Django,</description>
    </item>
    <item>
      <title>Backend Python:Steps for New Python Library or Package</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_steps-for-new-python-library-or-package/</link>
      <pubDate>Fri, 07 Sep 2018 10:49:17 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_steps-for-new-python-library-or-package/</guid>
      <description>Here are the steps.&#xA;Create repo on github with license, gitignore and readme stubs.&#xA;Clone the repo in the work area.&#xA;Lets say, my new library is called new-library&#xA;new-library is the repo name.&#xA;Inside the cloned repo, create virtual env by running: pipenv install --python 3.8&#xA;Above step creates a virtualenv using python 3.8 (already installed on my system)&#xA;now install all the required packages. The basic ones I always install are: pytest, pytest-cov, typing, codecov, mypy and flake8</description>
    </item>
    <item>
      <title>Backend Python:Default Parameter Gotcha</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_default-parameter-gotcha/</link>
      <pubDate>Fri, 07 Sep 2018 10:12:33 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_default-parameter-gotcha/</guid>
      <description>Take a look at this code. All it does is return a list with appended parameter. In case no list is supplied, it defaults to an empty list and appends to it. Or is it???&#xA;def add_to_list(item, item_list=[]): item_list.append(item) return item_list add_to_list(&amp;#34;gold&amp;#34;) # expected: [&amp;#34;gold&amp;#34;] #actual: [&amp;#34;gold&amp;#34;] add_to_list(&amp;#34;silver&amp;#34;) # expected: [&amp;#34;silver&amp;#34;] #actual: [&amp;#34;gold&amp;#34;,&amp;#34;silver&amp;#34;] Look at the second result. We expected [&amp;quot;silver&amp;quot;] expecting the item to be appended to an empty list as we never passed in a list and expected a default empty list as in function definition.</description>
    </item>
    <item>
      <title>Backend Python:Linting Using Flake</title>
      <link>https://tek-shinobi.github.io/posts/backend-python_linting-using-flake/</link>
      <pubDate>Fri, 07 Sep 2018 10:08:20 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/backend-python_linting-using-flake/</guid>
      <description>Linting is a must for any python project.&#xA;Two options are used most (in order of usage and popularity)&#xA;flake8 â€“ most used by open source python projects pylint â€“ enabled by default in many IDEs like Visual Studio Code Many folks run both.&#xA;I chose flake8. Primary reason is that out of the box, pylint barks at everything in my code. The signal to noise ratio is god-awful. It needs to be configured via .</description>
    </item>
    <item>
      <title>Python Scrapy:Removing Non Ascii Characters From Text in Python</title>
      <link>https://tek-shinobi.github.io/posts/python-scrapy_removing-non-ascii-characters-from-text-in-python/</link>
      <pubDate>Wed, 05 Sep 2018 11:13:58 +0300</pubDate>
      <guid>https://tek-shinobi.github.io/posts/python-scrapy_removing-non-ascii-characters-from-text-in-python/</guid>
      <description>I was handling some text scraped using Scrapy and the text had non-ascii unicode charcters like \u003e. If I did this, it didn&amp;rsquo;t work:&#xA;html_text = response.text.encode(&amp;#39;ascii&amp;#39;, errors=&amp;#39;ignore&amp;#39;).decode() Here response.text is the string that contains unicode text (scrapy returns strings encoded in unicode). The html_text still had non ascii unicode characters like \u003e This worked:&#xA;html_text = response.text.encode(&amp;#39;ascii&amp;#39;, errors=&amp;#39;ignore&amp;#39;).decode(&amp;#39;unicode-escape&amp;#39;) Note that unicode-escape part in decode. That made the difference in getting rid of characters like \u003e and replacing them with space.</description>
    </item>
  </channel>
</rss>
