<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Tek Shinobi Blog</title>
    <link>https://tek-shinobi.github.io/categories/golang/</link>
    <description>Recent content in golang on Tek Shinobi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 11 Jul 2023 15:17:34 +0300</lastBuildDate><atom:link href="https://tek-shinobi.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Testing: Creating Large Files</title>
      <link>https://tek-shinobi.github.io/posts/golang-testing-creating-large-files/</link>
      <pubDate>Tue, 11 Jul 2023 15:17:34 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-testing-creating-large-files/</guid>
      <description>Needed a quick hack to generate a known file size, to test that file upload limit logic works in an endpoint
Another option is to just generate a temporary file, using nearly the same process. This approach is fine but can slow down the test since file needs to be generated each time the test is run and beyond a certain size, this file generation time can become non-trivial.
package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) type LargeData struct { Data []byte } const desiredSize = 12 * 1024 * 1024 // 12MB  func main() { rand.</description>
    </item>
    
    <item>
      <title>Golang: Handling Null in Database Tables</title>
      <link>https://tek-shinobi.github.io/posts/golang-handling-null-in-database-tables/</link>
      <pubDate>Wed, 11 May 2022 01:52:51 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-handling-null-in-database-tables/</guid>
      <description>Consider this table schema (Postgres):
CREATE TABLE IF NOT EXISTS mytable ( id BIGSERIAL PRIMARY KEY, title TEXT NULL, version INTEGER NULL ); if we write its Go model, title is string and version is int. But here we have a problem. Zero value of string in Go is &amp;quot;&amp;quot; not nil. Same for int whose zero value is 0 and not nil.
If we tried to write the above model in Go like this:</description>
    </item>
    
    <item>
      <title>Golang: Using Postgres Inside Docker Container</title>
      <link>https://tek-shinobi.github.io/posts/using-postgres-inside-docker-container/</link>
      <pubDate>Thu, 05 May 2022 10:38:56 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/using-postgres-inside-docker-container/</guid>
      <description>Cleanup if default postgres port not free If port 5432 is already in use, run this to see what process is using it:
sudo ss -lptn &#39;sport = :5432&#39; the above command will also display the pid using which you can kill the process. For example, if the pid is 1667, kill it by sudo kill 1667
 To connect to an existing running docker container via its container id, scroll to end To see how to connect to it using only golang standard library (database/sql) + a database driver (lib/pq in this case for postgres), without helper methods from 3rd party libraries like sqlx, scroll to end  Connecting to postgres from scratch First launch the postgres container in interactive mode:</description>
    </item>
    
    <item>
      <title>Golang: Common Concurrency Patterns</title>
      <link>https://tek-shinobi.github.io/posts/golang-common-concurrency-patterns/</link>
      <pubDate>Fri, 15 Oct 2021 15:41:34 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-common-concurrency-patterns/</guid>
      <description>Some simple concurrency patterns which are often used in Golang
1. for-select pattern This is a fundamental pattern. It is typically used to read data from multiple channels.
var c1, c2 &amp;lt;-chan int for { // Either loop infinitely or range over something  select { case &amp;lt;-c1: // Do some work with channels  case &amp;lt;-c2: default: // auto run if other cases are not ready  } // do some work } The select statement looks like switch one, but its behavior is different.</description>
    </item>
    
    <item>
      <title>Golang Channels</title>
      <link>https://tek-shinobi.github.io/posts/golang-channels/</link>
      <pubDate>Mon, 11 Oct 2021 16:24:24 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golang-channels/</guid>
      <description>When dealing with conccurency problems, it is harder to reason about when moving down the stack of abstraction (machine, process, thread, hardware components, etc). Most programming languages use thread as its highest level of abstraction. Fortunately, Go builds on top of that &amp;amp; introduced Goroutine.
 “Share memory by communicating, don’t communicate by sharing memory.”
 One of Go’s mottos   Although Golang provides traditional locking mechanism in sync package, its philosophy prefers “share memory by communicating”.</description>
    </item>
    
  </channel>
</rss>
