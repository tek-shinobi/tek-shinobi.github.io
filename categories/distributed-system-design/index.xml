<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>distributed system design on Tek Shinobi Blog</title>
    <link>https://tek-shinobi.github.io/categories/distributed-system-design/</link>
    <description>Recent content in distributed system design on Tek Shinobi Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 25 Jul 2023 10:41:57 +0300</lastBuildDate><atom:link href="https://tek-shinobi.github.io/categories/distributed-system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang: Distributed Rate Limiting Using Fixed Window and Redis</title>
      <link>https://tek-shinobi.github.io/posts/golangdistributed-rate-limiting-using-fixed-window/</link>
      <pubDate>Tue, 25 Jul 2023 10:41:57 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/golangdistributed-rate-limiting-using-fixed-window/</guid>
      <description>Fixed Window rate limiter is the simplest form of rate limiting. It means that once the expiration has been set, a client that reaches the limit will be blocked from making further requests until the expiration time arrives. If a client has a limit of 50 requests every minute and makes all 50 requests in the first 5 seconds of the minute, it will have to wait 55 seconds to make another request.</description>
    </item>
    
    <item>
      <title>Rate Limiting in a Distributed System</title>
      <link>https://tek-shinobi.github.io/posts/rate-limiting-in-distributed-system/</link>
      <pubDate>Sat, 15 Jul 2023 13:19:42 +0300</pubDate>
      
      <guid>https://tek-shinobi.github.io/posts/rate-limiting-in-distributed-system/</guid>
      <description>Assume that we own a suite of API based microservices that implement a discount coupon service. Rate-limiting is needed to ensure that all clients have equal access to our resources and protect our APIs from (malicious or erroneous) intensive usage.
Rate-limiting seems straightforward: we only allow a given client to perform X calls every minute. Itâ€™s quite easy to implement on a single server instance, and we can easily find libraries to do that for us.</description>
    </item>
    
  </channel>
</rss>
